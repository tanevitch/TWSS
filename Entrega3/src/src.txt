El archivo main.py llama a parte del scrapper utilizado en la entrega 2 para obtener los datos de películas en formato JSON-LD
Luego lee un archivo movies.ttl que es una ontología de películas creada con Protege, y carga individuals a partir de los datos de las películas, generando como resultado otro archivo (output.ttl) que es la ontología de películas con instancias de películas

En particular, el archivo entregado (output.ttl) está modificado con Protege porque era deseable ver cómo el razonador infería información a partir de las características que le definí a algunas propiedades. Y para eso, necesitaba relacionar información que como humano lo sé (porque ya sé que Hunger Games es una saga y cuál está relacionada con cuál), pero no estaba expresado en JSON-LD.  De esta manera, fueron cargadas a mano algunos individuals para las relaciones sequelOf, workPresented y location. 


Propiedades con características:
location || funcional
Si hay dos funciones que están en dos cines distintos, entonces ese cine tiene que ser el mismo

sequel || transitiva  
Si hay una película C que es es continuaicón de una película B, y una película B que es continuación de una película A, entonces la película C es continuación de la A
Y por inversa, la película A va a tener como continuación a B y a C, y la película B va a tener como continuación a C

Una idea similar se aplica a isBasedOn, que también es transitiva

directs || funcional
El director de la película es uno solo. A lo sumo podrá tener co-directores pero en mi ontología permito que haya UN director. Por lo tanto, si una película tiene dos directores tienen que ser el mismo
Además, en una misma pelícual un director no puede ser actor porque definí que la relación actor es disjunta de director

worksWith || simétrica irreflexiva
La propiedad de que dos personas trabajaron juntos es simétrica y además un actor no pudo haber trabajado "consigo mismo". 

